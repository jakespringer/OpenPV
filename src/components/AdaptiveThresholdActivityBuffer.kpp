/*
 * AdaptiveThresholdActivityBuffer.kpp
 *
 *  Created on: Jun 21, 2019
 *      Author: jspringer
 */

#include "utils/conversions.hpp"

// TODO: Implement GPU support correctly
#ifdef PV_RUN_ON_GPU
#define PV_RUN_ON_GPU_
#undef PV_RUN_ON_GPU
#endif

#ifdef PV_RUN_ON_GPU
namespace PVCuda {
__global__ void applyThresholdsAdaptiveThresholdActivityBufferOnGPU
#else
namespace PV {
inline void applyThresholdsAdaptiveThresholdActivityBufferOnGPU
#endif // PV_RUN_ON_GPU
      (int const nbatch,
       int const numNeurons,
       int const nx,
       int const ny,
       int const nf,
       int const lt,
       int const rt,
       int const dn,
       int const up,
       int const numVertices,
       float const thresholdWindow,
       float const *thresholds,
       float const *V,
       float *A) {
#ifdef PV_RUN_ON_GPU
   int index = (blockIdx.x * blockDim.x) + threadIdx.x;
   if (index < numNeurons * nbatch)
#else
#ifdef PV_USE_OPENMP_THREADS
#pragma omp parallel for
#endif
   for (int index = 0; index < numNeurons * nbatch; index++)
#endif // PV_RUN_ON_GPU
   {
      int last            = numVertices - 1;
      int b               = index / numNeurons;
      int k               = index % numNeurons;
      float const *VBatch = V + b * numNeurons;
      float *ABatch       = A + b * (nx + lt + rt) * (ny + up + dn) * nf;
      int kex             = kIndexExtended(k, nx, ny, nf, lt, rt, dn, up);
      float potential     = VBatch[k];
      float threshold     = thresholds[k];
      float activity      = 0.0f;

      if (potential >= threshold)
      {
         activity = potential;
      }
      
      ABatch[kex] = activity;

#ifdef PV_RUN_ON_GPU
#error "Not implemented"
#else
#ifdef PV_USE_OPENMP_THREADS
#pragma omp atomic
      thresholds[k] = thresholds[k] * (1 - thresholdWindow) + potential * thresholdWindow;
#else
      thresholds[k] = thresholds[k] * (1 - thresholdWindow) + potential * thresholdWindow;
#endif
#endif
   }
}

} // namespace (PV or PVCuda)

#ifdef PV_RUN_ON_GPU_
#define PV_RUN_ON_GPU
#undef PV_RUN_ON_GPU_
#endif
